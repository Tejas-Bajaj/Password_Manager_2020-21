from random import randint
import string

def generate_key():     #generate a random key and encrypt it using affine cipher. The encrypted key is to be stored in a column against every user in the master table.
    x,y,z='',string.ascii_lowercase,''
    while len(x)<6:
        a=y[randint(0,25)]
        if a not in x:
            x+=a
    x=affine_encrypt(x)
    return(x)

def encrypt(plaintext,key):     #Use this function to encrypt password, pass password as plaintext and key generated by key generator into this function.
    return(columnartransposition_encrypt(base95to10(str(plaintext)),str(key)))

def decrypt(ciphertext,key):     #Use this function to decrypt password, pass password as ciphertext and key generated by key generator into this function.
    return(base10to95(columnartransposition_decrypt(str(ciphertext),str(key))))

def base10to95(x):       #Converts from base 10 to base 95, used to decrypt.    
    x,c=str(alphatonum(x)),''
    while len(x)>0 and x[0]=='0':
        x=x[1::]
        c+='0'
    if len(x)==0:
        y=''
    else:
        x=int(x)
        y=str(b10to95(x))
    return(c+y)

def b10to95(x):     #Recursive function to actually convert from base 10 to 95.
    a,b=divmod(x,95)
    if a==0:
        return(str(d10to95[str(b)]))
    else:
        return(b10to95(a)+str(d10to95[str(b)]))

def base95to10(x):       #Converts from base 95 to base 10, used to encrypt.      
    y,c=0,''
    while len(x)>0 and x[0]=='0':
        x=x[1::]
        c+='0'
    if len(x)>0:
        for i in range(len(x)):
            y+=int(d95to10[x[-i-1]])*(95**i)
    else:
        y=''
    y=numtoalpha(c+str(y))
    return(y)

def numtoalpha(x):      #Convert to use transposition
    y=''
    for i in x:
        y+=str(chr(int(i)+97))
    return(y)

def alphatonum(x):      #Convert back while decrypting
    y=''
    for i in x:
        y+=str(ord(i)-97)
    return(y)
        
def affine_encrypt(x):      #encrypt using affine cipher
    y=''
    for i in x:
        y+=str(chr(((7*(ord(i)-97)+11)%26)+97))
    return(y)

def affine_decrypt(x):      #decrypt using affine cipher
    y=''
    for i in x:
        y+=str(chr(((15*(ord(i)-108))%26)+97))
    return(y)

def columnartransposition_encrypt(x,key):       #encrypt using columnar transposition and encrypted key
    key=list(affine_decrypt(key))
    b,a=key.copy(),''
    b.sort()
    for i in b:
        a+=str(key.index(i))
    n=len(x)    
    x+='k'*(6-(n%6))    
    n,y=len(x),''    
    r=n//6      
    for j in a:
        for k in range(r):
            y+=x[(6*k)+int(j)]
    return(y)

def columnartransposition_decrypt(x,key):           #encrypt using columnar transposition and encrypted key
    key=list(affine_decrypt(key))
    b,a=key.copy(),''
    b.sort()
    for l in key:
        a+=str(b.index(l))
    n,y=len(x),''
    r=n//6
    for i in range(r):
        for j in a:
            y+=x[i+int(j)*r]
    for k in range(len(y)):
        if y[k]=='k':
            y=y[:k]
            break
    return(y)   

#Dictionaries to help in base conversion.
d10to95={'0': '0', '1': '1', '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9', '10': 'a', '11': 'b', '12': 'c', '13': 'd', '14': 'e', '15': 'f', '16': 'g', '17': 'h', '18': 'i', '19': 'j', '20': 'k', '21': 'l', '22': 'm', '23': 'n', '24': 'o', '25': 'p', '26': 'q', '27': 'r', '28': 's', '29': 't', '30': 'u', '31': 'v', '32': 'w', '33': 'x', '34': 'y', '35': 'z', '36': 'A', '37': 'B', '38': 'C', '39': 'D', '40': 'E', '41': 'F', '42': 'G', '43': 'H', '44': 'I', '45': 'J', '46': 'K', '47': 'L', '48': 'M', '49': 'N', '50': 'O', '51': 'P', '52': 'Q', '53': 'R', '54': 'S', '55': 'T', '56': 'U', '57': 'V', '58': 'W', '59': 'X', '60': 'Y', '61': 'Z', '62': '!', '63': '"', '64': '#', '65': '$', '66': '%', '67': '&', '68': "'", '69': '(', '70': ')', '71': '*', '72': '+', '73': ',', '74': '-', '75': '.', '76': '/', '77': ':', '78': ';', '79': '<', '80': '=', '81': '>', '82': '?', '83': '@', '84': '[', '85': '\\', '86': ']', '87': '^', '88': '_', '89': '`', '90': '{', '91': '|', '92': '}', '93': '~', '94': ' '}
d95to10={'0': '0', '1': '1', '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9', 'a': '10', 'b': '11', 'c': '12', 'd': '13', 'e': '14', 'f': '15', 'g': '16', 'h': '17', 'i': '18', 'j': '19', 'k': '20', 'l': '21', 'm': '22', 'n': '23', 'o': '24', 'p': '25', 'q': '26', 'r': '27', 's': '28', 't': '29', 'u': '30', 'v': '31', 'w': '32', 'x': '33', 'y': '34', 'z`': '89', '{': '90', '|': '91', '}': '92', '~': '93', ' ': '94'}

